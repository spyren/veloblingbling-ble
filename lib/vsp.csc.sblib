'******************************************************************************
'   @brief
'       vSP Bridge Mode, Battery Service and CSC Service.
'
'       Battery level is always 50 %.
'
'   @file
'       vsp.csc.slib
'   @author
'       Peter Schmid, peter@spyr.ch
'   @date
'       2014-05-14
'   @remark
'       Language: smartBASIC 1.8.88.0, LAIRD BL600/BL652 Module
'       Example :: BleVSpUartBridge.sb (See in BL600CodeSnippets.zip)
'   @copyright
'       Peter Schmid, Switzerland
'
'       This file is part of "Velo Bling-Bling" BLE application software.
'
'       "Velo Bling-Bling" software is free software: you can redistribute it
'       and/or modify it under the terms of the GNU General Public License as
'       published by the Free Software Foundation, either version 3 of the
'       License, or (at your option) any later version.
'
'       "Velo Bling-Bling" is distributed in the hope that it will be useful,
'       but WITHOUT ANY WARRANTY; without even the implied warranty of
'       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'       GNU General Public License for more details.
'
'       You should have received a copy of the GNU General Public License along
'       with "Velo Bling-Bling". If not, see <http:'www.gnu.org/licenses/>.
'
'******************************************************************************

'******************************************************************************
' Definitions
'******************************************************************************

'******************************************************************************
' Register Error Handler as early as possible
'******************************************************************************
sub HandlerOnErr()
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n OnErr - ";GetLastError();"\n"
  endif
endsub
onerror next HandlerOnErr


'******************************************************************************
' Library Import
'******************************************************************************
#include "lib\debugging.routines.sblib"
#include "lib\ble.sblib"
#include "lib\standard.advert.mngr.sblib"
#include "lib\advert.report.manager.sblib"
#include "lib\connection.manager.sblib"
#include "lib\security.manager.sblib"
#include "lib\gap.service.sblib"
#include "lib\device.information.service.sblib"
#include "lib\custom.battery.service.sblib"
'#include "lib\battery.service.sblib"
#include "lib\cycling.service.sblib"
#include "lib\i2c.sblib"

'******************************************************************************
' Debugging resource after libs
'******************************************************************************

'******************************************************************************
' Global Variable Declarations
'******************************************************************************

dim stRsp$ as string        ' Uart rx data is stored here
dim ok$,er$
dim msg$
dim mnltk                   ' min size of ltk
dim mxltk                   ' max size of ltk
dim advFlags                ' value for flags AD
dim adTag                   ' AD Tag
dim adDta$                  ' AD Data

dim tsz                     ' txbuf size for vsp
dim rsz                     ' rxbuf size for vsp
dim flgs                    ' flags for vsp
dim uuhdl                   ' Service uuid handle for VSP
dim rx$                     ' vsp read data stored here
dim rxb                     ' vsp read block size


'******************************************************************************
' Initialisse Global Variable
'******************************************************************************

ok$      = "\nOK\r\n>"
er$      = "\nERROR\r\n>"

mnltk    = MIN_LTK_SIZE
mxltk    = MAX_LTK_SIZE
advFlags = DISCOVERY_MODE    ' can be changed via 'fg' command

adTag    = 0
adDta$   = ""

tsz      = 112
rsz      = 144
flgs     = 1
uuhdl    = 0

rxb      = 60

'==============================================================================
'==============================================================================
sub DbgInfo(id as integer)
  select id
  case 0
    DbgPrnAdvReport(adRpt$)
  case 1
    DbgPrnAdvReport(scRpt$)

  case else
  endselect
endsub



'******************************************************************************
' Function and Subroutine definitions
'******************************************************************************


'==============================================================================
'==============================================================================
sub UartRsp(rsp as integer)
  dim rc
  if rsp == 0 then
    rc = UartWrite(ok$)
  else
    rc = UartWrite(er$)
  endif
endsub

'==============================================================================
'==============================================================================
sub UartMsg(byref msg$ as string)
  dim rc
  rc = UartWrite(msg$)
endsub


'==============================================================================
'==============================================================================
sub ShowConnParms(nCtx as integer)
  dim rc
  dim intrvl,sprvto,slat
  rc= BleGetCurConnParms(nCtx, intrvl, sprvto, slat)
  AssertResCode(rc, 1240)
  if rc==0 then
    DbgMsgVal("Conn Interval", intrvl)
    DbgMsgVal("Conn Supervision Timeout", sprvto)
    DbgMsgVal("Conn Slave Latency", slat)
  endif
endsub



'==============================================================================
'==============================================================================
function VSpAdvert()
  dim rc,rpt$
  rc = BleAdvRptAddUuid128(scRpt$, uuhdl)
  AssertResCode(rc, 7410)
  if rc == 0 then
    rpt$=""
    rc = BleAdvRptsCommit(rpt$, scRpt$)
    AssertResCode(rc, 7420)
  endif
  if rc == 0 then
    DbgMsg("\nVSP added 128 uuid to scanrpt")
  endif
endfunc rc

'==============================================================================
' This is called to start things off just before the waitevent at the end of
' the file
'==============================================================================
sub OnStartup()
  dim rc

//  rc = BleSecMngrLescPairingPref(0)  ' legacy pairing (BLE 4.0)
  InitSecurityMngr(PAIRING_IOCAPABILITY, MIN_LTK_SIZE, MAX_LTK_SIZE)

  ' Initialise services
  InitGapService()
  InitDisService()

  ' Initialise Battery Service
  InitBatService(50, 0)

  ' Initialise CSC Service
  InitCscService()

  ' Initiliase advert and scan reports
  InitAdvReports(advFlags)

  ' Initialise VSP service
  rc = BleVSpOpen(tsz, rsz, flgs, uuhdl)
  AssertResCode(rc, 7982)

  ' add the VSP service to the scan report
//  rc = VSpAdvert()
//  AssertResCode(rc,7981)
    
  
endsub


'******************************************************************************
' Handler definitions
'******************************************************************************

'==============================================================================
' This handler is called when there is a BLE message
'==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer

  ' Inform libraries
  ConnMngrOnBleMsg(nMsgId,nCtx)
  AdvMngrOnBleMsg(nMsgId,nCtx)

  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
    DbgMsgVal(" --- Connect : ",nCtx)
    ShowConnParms(nCtx)
    ' GpioWrite(16, 0)
    GpioWrite(DVK_LED0, 1)
    ' BLE state info over port
    'GpioWrite(I2C_DATA_READY, 0)
    state = 1


  case BLE_EVBLEMSGID_DISCONNECT
    DbgMsgVal(" --- Disconnect : ",nCtx)
    ' GpioWrite(16, 1)
    GpioWrite(DVK_LED0, 0)
    ' BLE state info over port
    'GpioWrite(I2C_DATA_READY, 1)
    state = 0

  case BLE_EVBLEMSGID_IMMEDIATE_ALERT_SERVICE_ALERT
    DbgMsgVal( "\n --- Immediate Alert Service Alert ", nCtx)
    DbgMsg("\n")

  case BLE_EVBLEMSGID_DISPLAY_PASSKEY
    DbgMsgVal("Display Pairing Passkey ",nCtx)

  case BLE_EVBLEMSGID_NEW_BOND
    DbgMsg(" +++ New Bond")

  case BLE_EVBLEMSGID_UPDATED_BOND
    DbgMsg(" +++ Updated Bond")

  case BLE_EVBLEMSGID_ENCRYPTED
    DbgMsg(" +++ Encrypted Connection")

  case BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER
    DbgMsgVal(" -- Conn to Bonded Master ",nCtx)

  case BLE_EVBLEMSGID_AUTH_KEY_REQUEST
    DbgMsgVal(" +++ Auth Key Request, type=",nCtx)

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
    ShowConnParms(nCtx)

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL
    DbgMsg(" ??? Conn Parm Negotiation FAILED")

  case else
    DbgMsgVal("Unknown Ble Msg", nMsgId)
  endselect
endfunc 1

'==============================================================================
' This handler is called when there is a CHARCCCD message
'==============================================================================
function HandlerCharCccd(BYVAL hChar AS INTEGER, BYVAL nVal AS INTEGER) as integer
  if hChar == chCscMeas then
    DbgMsgVal(" --- Csc Notification : ", nVal)
  else
    DbgMsgVal(" --- New CCCD : ", nVal)
  endif
endfunc 1


'==============================================================================
' This handler is called when data has arrived at the virtual serial port
' or if the vsp tx buffer is empty
'==============================================================================
function HandlerLoop()
  BleVspUartBridge()
endfunc 1

'==============================================================================
' This handler is called when data has arrived at the serial port
'==============================================================================
function HandlerBlrAdvTimOut() as integer

  if AdvMngrOnAdvTimeOut() == 0 then

    DbgMsg( "\nAdvert stopped via timeout" )
    'DbgMsg( "\n   - could use SystemStateSet(0) to switch off" )

    '------------------------------------------------------------
    '  Switch off the system - requires a power cycle to recover
    '------------------------------------------------------------
    '  rc = SystemStateSet(0)
    '  AssertResCode(rc,1199)
  endif

endfunc 1

'******************************************************************************
' Equivalent to main() in C
'******************************************************************************

'------------------------------------------------------------------------------
' Enable synchronous event handlers
'------------------------------------------------------------------------------

OnEvent  EVBLE_ADV_TIMEOUT  call HandlerBlrAdvTimOut
OnEvent  EVCHARCCCD         call HandlerCharCccd

' EVBLEMSG indicate when signifficant BLE event occurs.
' Function HandlerBleMsg is called to interparate Message ID and context
OnEvent  EVBLEMSG           call HandlerBleMsg

' all events have the same handler
' EVVSPRX is thrown when VSP is open and data has arrived
OnEvent  EVVSPRX            call HandlerLoop
' EVUARTRX  = data has arrived at the UART interface
OnEvent  EVUARTRX           call HandlerLoop
OnEvent  EVVSPTXEMPTY       call HandlerLoop
OnEvent  EVUARTTXEMPTY      call HandlerLoop

'------------------------------------------------------------------------------
' Initialise Services and then wait for events
'------------------------------------------------------------------------------

dim rc

'Create Advert packets and register services
OnStartup()

'Start advertising
rc=StartAdverts(ADV_IND)
AssertResCode(rc, 1001)

' sets I2C_DATA_READY (sio25) as a digital in
rc = GpioSetFunc(I2C_DATA_READY, DIGITAL_IN, 1)
' sets I2C_DATA_READY (sio25) as a digital out
'rc = GpioSetFunc(I2C_DATA_READY, DIGITAL_OUT, 1)
AssertResCode(res, 1000)


' Send user prompt for uart based command interface
msg$="\n\r"
UartMsg(msg$)
msg$=DEVICENAME
UartMsg(msg$)
msg$="\n\r"
UartMsg(msg$)

' Send an OK response
UartRsp(0)
