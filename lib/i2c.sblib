'******************************************************************************
'   @brief
'       I2C Communication between BL652 and Bling Bling MCU
'       The BL652 is Master :-( BL652 can only be the single master)
'       High to low transition on GPIO25: Data ready for read
'       All registers are 32 bit
'       A write with only 8 bit data sets the register address
'
'       Reg
'        -  address        8bit wr  bit7: auto increment
'        0  state         32bit wr  bit0: BLE link established
'        4  wheelRevo     32bit rd  see CSC measurement
'               see BLE CSC profile (cumulative wheel revolutions (unitless))
'        8  wheelTime     32bit rd  see CSC measurement
'                           bit0-15
'               see BLE CSC profile (last wheel event time (1/1024 s))
'                           bit16-23 battery charge level
'       12  displayMode   32bit wr
'                           bit0-3   LOWER TOPSIDE
'                           bit4-7   UPPER TOPSIDE
'                           bit8-11  BLING TOPSIDE
'                           bit12-15
'                           bit16-19 LOWER BOTTOMSIDE
'                           bit20-23 UPPER BOTTOMSIDE
'                           bit24-27 BLING BOTTOMSIDE
'                           bit28-31
'               0 CYCLOCOMPUTER, 1 STRING, 2 IMAGE, 3 LIGHT, 4 BLANK
'       16  cycleMode    32bit wr
'                           bit0-4   LOWER TOPSIDE
'                           bit5-9   UPPER TOPSIDE
'                           bit10-14 [BLING TOPSIDE]
'                           bit15
'                           bit16-20 LOWER BOTTOMSIDE
'                           bit21-25 UPPER BOTTOMSIDE
'                           bit26-30 [BLING BOTTOMSIDE]
'                           bit31
'               0 CURRENTSPEED, 1 MAXIMUMSPEED, 2 AVERAGESPEED, 3 TRIPDISTANCE,
'               4 TOTALDISTANCE, 5 CURRENTALTITUDE, 6 TRIPELEVATIONGAIN,
'               7 TOTALELEVATIONGAIN, 8 MAXALTITUDE, 9 INCLINE, 10 TEMPERATURE,
'               11 PEDALINGCADENCE, 12 CURRENTTIME, 13 CURRENTDATE, 14 TRIPTIME,
'               15 TOTALTIME, 16 CHRONOTIME, 17 NOCYCLO
'       20  displayColor 32bit wr
'                           bit0-4   LOWER TOPSIDE
'                           bit5-9   UPPER TOPSIDE
'                           bit10-14 [BLING TOPSIDE]
'                           bit15
'                           bit16-20 LOWER BOTTOMSIDE
'                           bit21-25 UPPER BOTTOMSIDE
'                           bit26-30 [BLING BOTTOMSIDE]
'                           bit31
'               0 BLACK, 1 RED, 2 GREEN, 3 YELLOW, 4 BLUE, 5 MAGENTA, 6 CYAN,
'               7 WHITE
'       24  displayImageTop 32bit wr
'                           bit0-7   LOWER
'                           bit8-15  UPPER
'                           bit16-23 BLING
'                           bit24-31
'               0 .. 49
'       28  displayImageBottom 32bit wr
'                           bit0-7   LOWER
'                           bit8-15  UPPER
'                           bit16-23 BLING
'                           bit24-31
'               0 .. 49
'       32  batteryLevel 32bit rd
'                           bit0-7  Level (0 .. 100 %)
'
'  @file
'      i2c.slib
'  @author
'      Peter Schmid, peter@spyr.ch
'  @date
'      2014-06-21
'  @remark
'      Language: smartBASIC 1.8.88.0, LAIRD BL600 Module
'  @copyright
'      Peter Schmid, Switzerland
'
'      This file is part of "Velo Bling-Bling" BLE application software.
'
'      "Velo Bling-Bling" software is free software: you can redistribute it
'      and/or modify it under the terms of the GNU General Public License as
'      published by the Free Software Foundation, either version 3 of the
'      License, or (at your option) any later version.
'
'      "Velo Bling-Bling" is distributed in the hope that it will be useful,
'      but WITHOUT ANY WARRANTY; without even the implied warranty of
'      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'      GNU General Public License for more details.
'
'      You should have received a copy of the GNU General Public License along
'      with "Velo Bling-Bling". If not, see <http://www.gnu.org/licenses/>.
'
'******************************************************************************

'******************************************************************************
' Definitions
'******************************************************************************
#define SLAVE_ADDRESS     1     ' I2C address main MCU
#define STATE_REG         0     ' state register
#define WHEEL_REVO_REG    4     ' wheelRevo register
#define WHEEL_TIME_REG    8     ' wheelTime register
#define DISPLAY_MODE_REG  12    ' displayMode register
#define CYCLE_MODE_REG    16    ' cycleMode register
#define DISPLAY_COLOR_REG 20    ' displayColor register
#define DISPLAY_IMGT_REG  24    ' displayImageTop register
#define DISPLAY_IMGB_REG  28    ' displayImageBottom register
#define BATTERY_LEVEL     32    ' batteryLevel register
#define DISPLAY_MODE_MOD  1     ' displayMode modified
#define CYCLE_MODE_MOD    2     ' cycleMode modified
#define DISPLAY_COLOR_MOD 4     ' displayColor modified
#define DISPLAY_IMAGE_MOD 8     ' displayImage modified
#define BLE_LINK_EST      1     ' BLE Link established

'******************************************************************************
' Register Error Handler as early as possible
'******************************************************************************

'******************************************************************************
' Library Import
'******************************************************************************

'******************************************************************************
' Global Variable Declarations
'******************************************************************************
DIM state
DIM displayMode
DIM cycleMode
DIM displayColor
DIM displayImage
DIM modifiedBits
DIM lastWheelRevo
DIM batLevel

'******************************************************************************
' Initialise Global Variables
'******************************************************************************
state = 0
displayMode = 0
cycleMode = 0
displayColor = 0
displayImage = 0
modifiedBits = 0
lastWheelRevo = 0

'******************************************************************************
' Function and Subroutine definitions
'******************************************************************************

SUB Delay(ms)
  DIM i : i = GetTickCount()
  while GetTickSince(i) < ms
  endwhile
ENDSUB

'==============================================================================
'this function is called when high to low transition: Data ready for read
'==============================================================================
FUNCTION DataReady()
  DIM rc

  rc = I2cWriteREG32(SLAVE_ADDRESS, STATE_REG, State) ' 5201
  AssertResCode(rc, 8010)
  Delay(1)

  rc = I2cReadREG32(SLAVE_ADDRESS, WHEEL_REVO_REG, wheelRevo)
  batLevel = wheelRevo >> 16
  wheelRevo = wheelRevo & 0x0000FFFF
  AssertResCode(rc, 8021)
  Delay(1)

  rc = I2cReadREG32(SLAVE_ADDRESS, WHEEL_TIME_REG, wheelTime)
  AssertResCode(rc, 8022)
  Delay(1)

  ' IF modifiedBits & DISPLAY_MODE_MOD THEN
  '   rc = I2cWriteREG32(SLAVE_ADDRESS, DISPLAY_MODE_REG, displayMode)
  '	AssertResCode(rc, 8040)
  ' ENDIF

  IF (State == 1) && (wheelRevo > lastWheelRevo) THEN
    CscEncode()
    rc = BleCharValueNotify(chCscMeas, csc$)
    AssertResCode(rc, 8050)
'    rc = SetBattLevel(batLevel)
  ENDIF
  lastWheelRevo = wheelRevo

endfunc 1

'==============================================================================
'==============================================================================
'==============================================================================
' Init
'==============================================================================
DIM res
DIM i2cHandle

res = I2cOpen(100000, 1, i2cHandle) ' 5226
AssertResCode(res, 8000)

' sets I2C_DATA_READY (sio25) as a digital in
res = GpioSetFunc(I2C_DATA_READY, DIGITAL_IN, PULL_UP_WEAK)
AssertResCode(res, 8100)

' GpioAssignEvent needs less current than GpioBindEvent
res = GpioAssignEvent(0, I2C_DATA_READY, HIGH_TO_LOW)
AssertResCode(res, 8110)

' detects when new data is ready and calls the function
ONEVENT EVDETECTCHAN0 CALL DataReady
